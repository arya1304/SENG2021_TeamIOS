openapi: "3.0.1"
info:
  title: "DespatchAdvice_iOS"
  version: 1.0.0
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/seng2021-6d3/v3-ios/1.0.0
- url: "https://t6r6w5zni9.execute-api.us-east-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "v3"
paths:
  /despatchAdvice/{despatchId}/despatchXML:
    get:
      parameters:
      - name: "despatchId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: Successfully retrieved Despatch Advice XML
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  Despatch Advice XML:
                    type: string
                    example: "<Despatch>...</Despatch>"
        '400':
          description: Bad Request - despatchId not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: despatchId not provided
        '404':
          description: Not Found - Despatch advice doesn’t exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: despatch advice doesn’t exist
      security:
      - despatchAuth: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveDespatchAdviceXML/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"despatchId\": \"$method.request.path.despatchId\"\
            \n  }\n}\n"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /users/signUp:
    post:
      summary: User sign-up
      description: Creates a new user account with a username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: arya23
                password:
                  type: string
                  format: password
                  example: value2
      responses:
        '200':
          description: Successfully signed up
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Congratualtions you have signed up
        '400':
          description: Bad Request - Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: username not provided
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:userSignUp/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/{despatchId}/shipment-arrival:
    get:
      parameters:
      - name: "despatchId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveRequestedDelivery/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"despatchId\": \"$method.request.path.despatchId\"\
            \n  }\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "bo91mq"
        timeoutInMillis: 29000
        cacheKeyParameters:
        - "method.request.path.despatchId"
        contentHandling: "CONVERT_TO_TEXT"
  /health-check:
    get:
      summary: Health check
      description: Returns a message confirming the API is running along with a timestamp.
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Hello from iOS Despatch Advice! The API is running.
                  timestamp:
                    type: string
                    format: date-time
                    example: 2025-04-07 01:51:59
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:APIHealthCheck/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/earliestDelivery:
    get:
      responses:
        '200':
          description: Successfully retrieved despatch advices
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  count:
                    type: string
                    example: "There are 1 despatch advices with the earliest delivery date: 2025-04-10"
                  despatchAdvices:
                    type: object
                    properties:
                      despatchAdvicesIDs:
                        type: array
                        items:
                          type: string
                        example:
                          - "ID: 6781"
      security:
      - despatchAuth: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveEarliestDeliveryDespatches/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /users:
    get:
      responses:
        '200':
          description: Successfully retrieved list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  users:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: string
                        example:
                          - "username: Eva"
                          - "username: Muzz"
                          - "username: doraemon"
                          - "username: james"
                          - "username: arya"
                          - "username: jimin"
        '204':
          description: No users exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 204
                  body:
                    type: object
                    properties:
                      message:
                        type: string
                        example: No users found
        '400':
          description: Bad Request - The username is not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The username is not provided
        '404':
          description: Not Found - The username is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The username is invalid
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveAllUsers/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/{despatchId}/items:
    get:
      parameters:
      - name: "despatchId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: List of all items and their descriptions for the specified despatch advice.
          content:
            application/json:
              schema:
                type: string
                description: List of all items in XML format.
                example: 
                  statusCode: "200"
                  Items: "<Item>\n  <cbc:Description>Beeswax</cbc:Description>\n  <cbc:Name>Acme Beeswax</cbc:Name>\n  <cac:BuyersItemIdentification>\n    <cbc:ID>6578489</cbc:ID>\n  </cac:BuyersItemIdentification>\n  <cac:SellersItemIdentification>\n    <cbc:ID>17589683</cbc:ID>\n  </cac:SellersItemIdentification>\n  <cac:ItemInstance>\n    <cac:LotIdentification>\n      <cbc:LotNumberID>5</cbc:LotNumberID>\n      <cbc:ExpiryDate>2035-03-16</cbc:ExpiryDate>\n    </cac:LotIdentification>\n  </cac:ItemInstance>\n</Item>"
        '400':
          description: Bad Request - Invalid despatch ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 
                      statuscode: "400"
                      message: "Bad Request - The despatch ID is not provided"
              
        '404':
          description: DespatchID is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example:
                      statuscode: "404"
                      message: "No content - The despatch ID is invalid"
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveAllItemsDespatch/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"despatchId\": \"$method.request.path.despatchId\"\
            \n  }\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "kxqymm"
        timeoutInMillis: 29000
        cacheKeyParameters:
        - "method.request.path.despatchId"
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/supplier:
    get:
      parameters:
      - name: "Supplier"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  count:
                    type: string
                    example: "There are 3 Despatch Advices from Supplier A"
                  despatchAdvices:
                    type: object
                    properties:
                      despatchAdvicesIDs:
                        type: array
                        items:
                          type: string
                    example: ["ID: 1", "ID: 2", "ID: 3"]
        '400':
          description: Bad Request - Supplier is not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 
                      statuscode: "400"
                      message: "Bad Request - Supplier is not provided"
              
        '404':
          description: Not Found - The supplier name is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example:
                      statuscode: "404"
                      message: "Not Found - The supplier name is not found"
      security:
      - despatchAuth: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveDespatchWithSupplier/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"queryStringParameters\": {\n    \"Supplier\":\
            \ \"$input.params('Supplier')\"\n  }\n}\n"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/{despatchId}/customer:
    get:
      parameters:
      - name: "despatchId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                type: string
                example: 
                  statusCode: 200
                  Items: customer_contact_details
        '400':
          description: Bad Request - The despatch ID is not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 
                      statuscode: "400"
                      message: "Bad Request - The despatch ID is not provided"
              
        '404':
          description: No content - The despatch ID is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example:
                      statuscode: "404"
                      message: "No content - The despatch ID is invalid"
      security:
      - despatchAuth: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveCustomerContact/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"despatchId\": \"$method.request.path.despatchId\"\
            \n  }\n}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /users/{username}/delete:
    delete:
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: Successfully deleted the user
        '400':
          description: Bad Request - The username is not provided
        '404':
          description: Not Found - The username is invalid
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:deleteUser/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"username\": \"$method.request.path.username\"\
            \n  }\n}\n"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice:
    get:
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  despatchAdvices:
                    type: array
                    items:
                      type: object
                      properties:
                        despatchAdviceID:
                          type: string
                          example:
                            statusCode: "200"
                            Items: "items_xml"
        '204':
          description: No Content - No despatch advice documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example:
                      {
                        "statusCode": 204,
                        "message": "No despatch advice found"
                      }
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveAllDespatches/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
    post:
      responses:
        '200':
          description: Created a despatch advice from an order advice 
          content:
            application/json:
              schema:
                type: string
                description: Despatch Advice in UBL format (XML)
                example: 
                  statusCode: "200"
        '400':
          description: Bad Request - Order advice is not in the correct format and or shipment details are not in the correct format. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example:
                      {
                        "statusCode": 404,
                        "message": "Bad Request: Inputs are not in the correct format"
                      }
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:createDespatchAdvices/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/countryDelivery:
    get:
      parameters:
      - name: "endDate"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "startDate"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "country"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  despatchAdvices with same ShipmentCountry in same period:
                    type: object
                    properties:
                      despatchAdvicesIDs:
                        type: array
                        items:
                          type: string
                        example:
                          - "ID: 3465"
                          - "ID: 503"
                          - "ID: 9331"
                          - "ID: 7027"
                          - "ID: 7911"
                          - "ID: 3285"
                          - "ID: 1507"
        '400':
          description: Bad Request - Either StartDate or EndDate is not provided
        '404':
          description: Not Found - Despatch advice doesn’t exist
      security:
      - despatchAuth: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveAllDespatchesSameCountryInSamePeriod/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"queryStringParameters\": {\n    \"country\": \"\
            $input.params('country')\",\n    \"startDate\": \"$input.params('startDate')\"\
            ,\n    \"endDate\": \"$input.params('endDate')\"\n  }\n}\n"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/{despatchId}/orderReference:
    get:
      parameters:
      - name: "despatchId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: Order reference details for the specified despatch advice.
          content:
            application/json:
              schema:
                type: string
                description: Order reference details in XML format.
                example: 
                  statusCode: "200"
                  Items: "<OrderReference>\n  <cbc:ID>AEG012345</cbc:ID>\n  <cbc:SalesOrderID>A</cbc:SalesOrderID>\n  <cbc:UUID>6E09886B-DC6E-439F-82D1-7CCAC7F4E3B1</cbc:UUID>\n  <cbc:IssueDate>2005-06-20</cbc:IssueDate>\n</OrderReference>"
        '400':
          description: Bad Request - Invalid despatch ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example:
                      statusCode: "400"
                      body: "Bad Request - The despatch ID is not provided"
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveOrderReference/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"despatchId\": \"$method.request.path.despatchId\"\
            \n  }\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "0zpbiv"
        timeoutInMillis: 29000
        cacheKeyParameters:
        - "method.request.path.despatchId"
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/latestDelivery:
    get:
      responses:
        '200':
          description: Successfully retrieved despatch advices
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  count:
                    type: string
                    example: "There are 1 despatch advices with the latest delivery date: 2025-04-10"
                  despatchAdvices:
                    type: object
                    properties:
                      despatchAdvicesIDs:
                        type: array
                        items:
                          type: string
                        example:
                          - "ID: 6781"
      security:
      - despatchAuth: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveLatestDeliveryDespatches/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/{despatchId}:
    delete:
      parameters:
      - name: "despatchId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:deleteDespatchAdvice/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"despatchId\": \"$method.request.path.despatchId\"\
            \n  }\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "j300yc"
        timeoutInMillis: 29000
        cacheKeyParameters:
        - "method.request.path.despatchId"
        contentHandling: "CONVERT_TO_TEXT"
  /despatchAdvice/{despatchId}/shipment:
    get:
      parameters:
      - name: "despatchId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: Shipment details for the specified despatch advice.
          content:
            application/json:
              schema:
                type: string
                description: Shipment details in XML format.
                example: 
                  statusCode: "200"
                  items: "<ShipmentDetails>\n  <cbc:ID>1</cbc:ID>\n  <cac:Consignment>\n    <cbc:ID>1</cbc:ID>\n  </cac:Consignment>\n  <cac:Delivery>\n    <cac:DeliveryAddress>\n      <cbc:StreetName>Avon Way</cbc:StreetName>\n      <cbc:BuildingName>Thereabouts</cbc:BuildingName>\n      <cbc:BuildingNumber>56A</cbc:BuildingNumber>\n      <cbc:CityName>Bridgtow</cbc:CityName>\n      <cbc:PostalZone>ZZ99 1ZZ</cbc:PostalZone>\n      <cbc:CountrySubentity>Avon</cbc:CountrySubentity>\n      <cac:AddressLine>\n        <cbc:Line>3rd Floor, Room 5</cbc:Line>\n      </cac:AddressLine>\n      <cac:Country>\n        <cbc:IdentificationCode>GB</cbc:IdentificationCode>\n      </cac:Country>\n    </cac:DeliveryAddress>\n    <cac:RequestedDeliveryPeriod>\n      <cbc:StartDate>2005-06-20</cbc:StartDate>\n      <cbc:StartTime>10:30:47.0Z</cbc:StartTime>\n      <cbc:EndDate>2005-06-21</cbc:EndDate>\n      <cbc:EndTime>10:30:47.0Z</cbc:EndTime>\n    </cac:RequestedDeliveryPeriod>\n  </cac:Delivery>\n</ShipmentDetails>"
        '400':
          description: Bad Request - Invalid despatch ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 
                      statusCode: "400"
                      message: "Bad Request - The despatch ID is not provided"
        '404':
          description: No content - The despatch ID is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 
                      statusCode: "404"
                      message: "No content - The despatch ID is invalid"
      security:
      - despatchAuth: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:retrieveShipmentDetails/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        requestTemplates:
          application/json: "{\n  \"pathParameters\": {\n    \"despatchId\": \"$method.request.path.despatchId\"\
            \n  }\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "tjtukl"
        timeoutInMillis: 29000
        cacheKeyParameters:
        - "method.request.path.despatchId"
        contentHandling: "CONVERT_TO_TEXT"
  /users/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: arya23
                password:
                  type: string
                  format: password
                  example: value2
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '404':
          description: User not found or incorrect password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This user does not exist
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:userLogin/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
  securitySchemes:
    despatchAuth:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "token"
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:130422545382:function:userTokenValidation/invocations"
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'http://127.0.0.1:3000'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
x-amazon-apigateway-request-validators:
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true